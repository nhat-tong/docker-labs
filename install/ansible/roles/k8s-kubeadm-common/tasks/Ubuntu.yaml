---

  - name: Letting iptables see bridged traffic
    shell: |
      cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        br_netfilter
      EOF
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
      EOF
      sudo sysctl --system
  
  - name: Install and configure prerequisites for containerd
    shell: |
      cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
        overlay
        br_netfilter
      EOF

      sudo modprobe overlay
      sudo modprobe br_netfilter

      # Setup required sysctl params, these persist across reboots.
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1
      EOF

      # Apply sysctl params without reboot
      sudo sysctl --system

  - name: Check if Docker GPG key exists
    stat:
      path: /usr/share/keyrings/docker-archive-keyring.gpg
    register: docker_gpg_key

  - name: Add Docker's official GPG key
    shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    when: not docker_gpg_key.stat.exists

  - name: Set up the stable repository
    shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  - name: Update the apt package index and install packages needed
    apt:
      pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - containerd.io
      state: present
      update_cache: yes

  - name: Configure containerd
    shell: |
      sudo mkdir -p /etc/containerd
      containerd config default | sudo tee /etc/containerd/config.toml

  - name: Restart containerd
    service:
      name: containerd
      state: restarted

  - name: Check if Google Cloud public signing key exists
    stat:
      path: /usr/share/keyrings/kubernetes-archive-keyring.gpg
    register: kubernetes_archive_key

  - name: Download the Google Cloud public signing key and Add the Kubernetes apt repository
    shell: |
      sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
      echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    when: not kubernetes_archive_key.stat.exists

  - name: Update apt package index, install kubelet, kubeadm and kubectl, and pin their version
    apt:
      pkg:
      - kubelet={{ KUBERNETES_VERSION }}
      - kubeadm={{ KUBERNETES_VERSION }}
      - kubectl={{ KUBERNETES_VERSION }}
      state: present
      update_cache: yes

  - name: Hold kubelet, kubeadm, kubectl
    shell: sudo apt-mark hold kubelet kubeadm kubectl